// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/images/images.proto
// DO NOT EDIT!

/*
Package images is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/images/images.proto

It has these top-level messages:
	Labeller
	Modifier
	ModifyInStream
	Image
*/
package images

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Labeller struct {
	Font  string `protobuf:"bytes,1,opt,name=Font" json:"Font,omitempty"`
	XSize uint32 `protobuf:"varint,2,opt,name=XSize" json:"XSize,omitempty"`
	YSize uint32 `protobuf:"varint,3,opt,name=YSize" json:"YSize,omitempty"`
	Red   uint32 `protobuf:"varint,4,opt,name=Red" json:"Red,omitempty"`
	Blue  uint32 `protobuf:"varint,5,opt,name=Blue" json:"Blue,omitempty"`
	Green uint32 `protobuf:"varint,6,opt,name=Green" json:"Green,omitempty"`
	Text  string `protobuf:"bytes,7,opt,name=Text" json:"Text,omitempty"`
}

func (m *Labeller) Reset()                    { *m = Labeller{} }
func (m *Labeller) String() string            { return proto.CompactTextString(m) }
func (*Labeller) ProtoMessage()               {}
func (*Labeller) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Labeller) GetFont() string {
	if m != nil {
		return m.Font
	}
	return ""
}

func (m *Labeller) GetXSize() uint32 {
	if m != nil {
		return m.XSize
	}
	return 0
}

func (m *Labeller) GetYSize() uint32 {
	if m != nil {
		return m.YSize
	}
	return 0
}

func (m *Labeller) GetRed() uint32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *Labeller) GetBlue() uint32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

func (m *Labeller) GetGreen() uint32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *Labeller) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Modifier struct {
	ModName    string `protobuf:"bytes,1,opt,name=ModName" json:"ModName,omitempty"`
	ModOptions []byte `protobuf:"bytes,2,opt,name=ModOptions,proto3" json:"ModOptions,omitempty"`
}

func (m *Modifier) Reset()                    { *m = Modifier{} }
func (m *Modifier) String() string            { return proto.CompactTextString(m) }
func (*Modifier) ProtoMessage()               {}
func (*Modifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Modifier) GetModName() string {
	if m != nil {
		return m.ModName
	}
	return ""
}

func (m *Modifier) GetModOptions() []byte {
	if m != nil {
		return m.ModOptions
	}
	return nil
}

type ModifyInStream struct {
	ImageData []byte      `protobuf:"bytes,1,opt,name=ImageData,proto3" json:"ImageData,omitempty"`
	Modifiers []*Modifier `protobuf:"bytes,2,rep,name=Modifiers" json:"Modifiers,omitempty"`
}

func (m *ModifyInStream) Reset()                    { *m = ModifyInStream{} }
func (m *ModifyInStream) String() string            { return proto.CompactTextString(m) }
func (*ModifyInStream) ProtoMessage()               {}
func (*ModifyInStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ModifyInStream) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (m *ModifyInStream) GetModifiers() []*Modifier {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

type Image struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Labeller)(nil), "images.Labeller")
	proto.RegisterType((*Modifier)(nil), "images.Modifier")
	proto.RegisterType((*ModifyInStream)(nil), "images.ModifyInStream")
	proto.RegisterType((*Image)(nil), "images.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Images service

type ImagesClient interface {
	Modify(ctx context.Context, opts ...grpc.CallOption) (Images_ModifyClient, error)
}

type imagesClient struct {
	cc *grpc.ClientConn
}

func NewImagesClient(cc *grpc.ClientConn) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) Modify(ctx context.Context, opts ...grpc.CallOption) (Images_ModifyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Images_serviceDesc.Streams[0], c.cc, "/images.Images/Modify", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesModifyClient{stream}
	return x, nil
}

type Images_ModifyClient interface {
	Send(*ModifyInStream) error
	Recv() (*Image, error)
	grpc.ClientStream
}

type imagesModifyClient struct {
	grpc.ClientStream
}

func (x *imagesModifyClient) Send(m *ModifyInStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imagesModifyClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Images service

type ImagesServer interface {
	Modify(Images_ModifyServer) error
}

func RegisterImagesServer(s *grpc.Server, srv ImagesServer) {
	s.RegisterService(&_Images_serviceDesc, srv)
}

func _Images_Modify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImagesServer).Modify(&imagesModifyServer{stream})
}

type Images_ModifyServer interface {
	Send(*Image) error
	Recv() (*ModifyInStream, error)
	grpc.ServerStream
}

type imagesModifyServer struct {
	grpc.ServerStream
}

func (x *imagesModifyServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imagesModifyServer) Recv() (*ModifyInStream, error) {
	m := new(ModifyInStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Images_serviceDesc = grpc.ServiceDesc{
	ServiceName: "images.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Modify",
			Handler:       _Images_Modify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/images/images.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/images/images.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0x4f, 0x6b, 0xfa, 0x40,
	0x10, 0x25, 0x3f, 0x35, 0xea, 0xfc, 0xb4, 0xc8, 0x52, 0xca, 0x62, 0xa5, 0x48, 0x4e, 0x39, 0xc5,
	0xa2, 0xe7, 0x5e, 0x44, 0x5a, 0x84, 0xda, 0x42, 0xec, 0xa1, 0xbd, 0x14, 0x56, 0x33, 0x95, 0x40,
	0xb2, 0x23, 0x71, 0x4b, 0xff, 0x7c, 0x94, 0x7e, 0xda, 0xb2, 0xb3, 0x49, 0x4d, 0x2f, 0x3d, 0xed,
	0x7b, 0x6f, 0xe7, 0xbd, 0x9d, 0x9d, 0x81, 0x68, 0x47, 0x99, 0xd2, 0xbb, 0x68, 0x4b, 0xba, 0x50,
	0xc9, 0x1b, 0x51, 0x12, 0x69, 0x34, 0x13, 0xb5, 0x4f, 0x0f, 0x93, 0x34, 0x57, 0x3b, 0xac, 0x8e,
	0x68, 0x5f, 0x90, 0x21, 0xe1, 0x3b, 0x36, 0xfc, 0xcb, 0xb7, 0xa5, 0x3c, 0x27, 0x5d, 0x1e, 0xce,
	0x17, 0x7c, 0x79, 0xd0, 0xb9, 0x55, 0x1b, 0xcc, 0x32, 0x2c, 0x84, 0x80, 0xe6, 0x35, 0x69, 0x23,
	0xbd, 0xb1, 0x17, 0x76, 0x63, 0xc6, 0xe2, 0x14, 0x5a, 0x8f, 0xeb, 0xf4, 0x13, 0xe5, 0xbf, 0xb1,
	0x17, 0xf6, 0x63, 0x47, 0xac, 0xfa, 0xc4, 0x6a, 0xc3, 0xa9, 0x4c, 0xc4, 0x00, 0x1a, 0x31, 0x26,
	0xb2, 0xc9, 0x9a, 0x85, 0x36, 0x71, 0x9e, 0xbd, 0xa2, 0x6c, 0xb1, 0xc4, 0xd8, 0x7a, 0x6f, 0x0a,
	0x44, 0x2d, 0x7d, 0xe7, 0x65, 0x62, 0x2b, 0x1f, 0xf0, 0xdd, 0xc8, 0xb6, 0x7b, 0xdb, 0xe2, 0x60,
	0x01, 0x9d, 0x15, 0x25, 0xe9, 0x4b, 0x8a, 0x85, 0x90, 0xd0, 0x5e, 0x51, 0x72, 0xa7, 0x72, 0x2c,
	0xdb, 0xab, 0xa8, 0xb8, 0x00, 0x58, 0x51, 0x72, 0xbf, 0x37, 0x29, 0xe9, 0x03, 0xb7, 0xd9, 0x8b,
	0x6b, 0x4a, 0xf0, 0x0c, 0x27, 0x9c, 0xf2, 0xb1, 0xd4, 0x6b, 0x53, 0xa0, 0xca, 0xc5, 0x08, 0xba,
	0x4b, 0x3b, 0xae, 0x85, 0x32, 0x8a, 0xd3, 0x7a, 0xf1, 0x51, 0x10, 0x11, 0x74, 0xab, 0x57, 0x6d,
	0x5c, 0x23, 0xfc, 0x3f, 0x1d, 0x44, 0xe5, 0xb0, 0xab, 0x8b, 0xf8, 0x58, 0x12, 0x9c, 0x43, 0x8b,
	0xcd, 0xf6, 0x0b, 0xb5, 0x44, 0xc6, 0xd3, 0x2b, 0xf0, 0xf9, 0xf2, 0x20, 0x66, 0xe0, 0xbb, 0x36,
	0xc4, 0xd9, 0xaf, 0xb4, 0x9f, 0xb6, 0x86, 0xfd, 0x4a, 0x67, 0x47, 0xe8, 0x5d, 0x7a, 0xf3, 0x11,
	0x0c, 0x35, 0x9a, 0xfa, 0x36, 0xed, 0x26, 0xcb, 0xba, 0x8d, 0xcf, 0x3b, 0x9c, 0x7d, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x04, 0xcf, 0x27, 0xc7, 0x2d, 0x02, 0x00, 0x00,
}
