// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/cnwnotification/cnwnotification.proto
// DO NOT EDIT!

/*
Package cnwnotification is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/cnwnotification/cnwnotification.proto

It has these top-level messages:
	FBTokens
	FBObject
	FBCommand
	FBButton
	ViaSMSRequest
	ConfigRequest
	Config2Request
	ErrorLog
	StartedRequest
	NotificationRequest
	RPCResponse
	ConfigResponse
	Notification
	DeviceID
	DisplayRequest
	SoundRequest
	SuppressRequest
	Connection
	ConnectionList
	WifiInfoRequest
	ButtonPressedRequest
	Info
	DeviceMessage
*/
package cnwnotification

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FBTokens struct {
	Mappings map[string]string `protobuf:"bytes,1,rep,name=Mappings" json:"Mappings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FBTokens) Reset()                    { *m = FBTokens{} }
func (m *FBTokens) String() string            { return proto.CompactTextString(m) }
func (*FBTokens) ProtoMessage()               {}
func (*FBTokens) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FBTokens) GetMappings() map[string]string {
	if m != nil {
		return m.Mappings
	}
	return nil
}

type FBObject struct {
	Timestamp uint32       `protobuf:"varint,1,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Commands  []*FBCommand `protobuf:"bytes,2,rep,name=Commands" json:"Commands,omitempty"`
}

func (m *FBObject) Reset()                    { *m = FBObject{} }
func (m *FBObject) String() string            { return proto.CompactTextString(m) }
func (*FBObject) ProtoMessage()               {}
func (*FBObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FBObject) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FBObject) GetCommands() []*FBCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

type FBCommand struct {
	Command              string      `protobuf:"bytes,1,opt,name=Command" json:"Command,omitempty"`
	Title                string      `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
	Body                 string      `protobuf:"bytes,3,opt,name=Body" json:"Body,omitempty"`
	Size                 uint32      `protobuf:"varint,4,opt,name=Size" json:"Size,omitempty"`
	Background           string      `protobuf:"bytes,5,opt,name=Background" json:"Background,omitempty"`
	Foreground           string      `protobuf:"bytes,6,opt,name=Foreground" json:"Foreground,omitempty"`
	URI                  string      `protobuf:"bytes,7,opt,name=URI" json:"URI,omitempty"`
	Buttons              []*FBButton `protobuf:"bytes,8,rep,name=Buttons" json:"Buttons,omitempty"`
	ApiKey               string      `protobuf:"bytes,9,opt,name=ApiKey" json:"ApiKey,omitempty"`
	DeviceName           string      `protobuf:"bytes,10,opt,name=DeviceName" json:"DeviceName,omitempty"`
	TextSizeMultiplier   float32     `protobuf:"fixed32,11,opt,name=TextSizeMultiplier" json:"TextSizeMultiplier,omitempty"`
	ButtonSizeMultiplier float32     `protobuf:"fixed32,12,opt,name=ButtonSizeMultiplier" json:"ButtonSizeMultiplier,omitempty"`
	ButtonColumns        uint32      `protobuf:"varint,13,opt,name=ButtonColumns" json:"ButtonColumns,omitempty"`
	ButtonRows           uint32      `protobuf:"varint,14,opt,name=ButtonRows" json:"ButtonRows,omitempty"`
}

func (m *FBCommand) Reset()                    { *m = FBCommand{} }
func (m *FBCommand) String() string            { return proto.CompactTextString(m) }
func (*FBCommand) ProtoMessage()               {}
func (*FBCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FBCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *FBCommand) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FBCommand) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *FBCommand) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FBCommand) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *FBCommand) GetForeground() string {
	if m != nil {
		return m.Foreground
	}
	return ""
}

func (m *FBCommand) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *FBCommand) GetButtons() []*FBButton {
	if m != nil {
		return m.Buttons
	}
	return nil
}

func (m *FBCommand) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *FBCommand) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *FBCommand) GetTextSizeMultiplier() float32 {
	if m != nil {
		return m.TextSizeMultiplier
	}
	return 0
}

func (m *FBCommand) GetButtonSizeMultiplier() float32 {
	if m != nil {
		return m.ButtonSizeMultiplier
	}
	return 0
}

func (m *FBCommand) GetButtonColumns() uint32 {
	if m != nil {
		return m.ButtonColumns
	}
	return 0
}

func (m *FBCommand) GetButtonRows() uint32 {
	if m != nil {
		return m.ButtonRows
	}
	return 0
}

type FBButton struct {
	Text  string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
	ID    uint32 `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=Size" json:"Size,omitempty"`
	Row   uint32 `protobuf:"varint,4,opt,name=Row" json:"Row,omitempty"`
	Extra uint32 `protobuf:"varint,5,opt,name=Extra" json:"Extra,omitempty"`
}

func (m *FBButton) Reset()                    { *m = FBButton{} }
func (m *FBButton) String() string            { return proto.CompactTextString(m) }
func (*FBButton) ProtoMessage()               {}
func (*FBButton) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FBButton) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *FBButton) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *FBButton) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FBButton) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *FBButton) GetExtra() uint32 {
	if m != nil {
		return m.Extra
	}
	return 0
}

// send an SMS via some devices' sim card
type ViaSMSRequest struct {
	Number  string `protobuf:"bytes,1,opt,name=Number" json:"Number,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *ViaSMSRequest) Reset()                    { *m = ViaSMSRequest{} }
func (m *ViaSMSRequest) String() string            { return proto.CompactTextString(m) }
func (*ViaSMSRequest) ProtoMessage()               {}
func (*ViaSMSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ViaSMSRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *ViaSMSRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ConfigRequest struct {
	Secret string `protobuf:"bytes,1,opt,name=Secret" json:"Secret,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type Config2Request struct {
	Device  string `protobuf:"bytes,1,opt,name=Device" json:"Device,omitempty"`
	FBToken string `protobuf:"bytes,2,opt,name=FBToken" json:"FBToken,omitempty"`
}

func (m *Config2Request) Reset()                    { *m = Config2Request{} }
func (m *Config2Request) String() string            { return proto.CompactTextString(m) }
func (*Config2Request) ProtoMessage()               {}
func (*Config2Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Config2Request) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Config2Request) GetFBToken() string {
	if m != nil {
		return m.FBToken
	}
	return ""
}

type ErrorLog struct {
	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID" json:"DeviceID,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (m *ErrorLog) Reset()                    { *m = ErrorLog{} }
func (m *ErrorLog) String() string            { return proto.CompactTextString(m) }
func (*ErrorLog) ProtoMessage()               {}
func (*ErrorLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ErrorLog) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *ErrorLog) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type StartedRequest struct {
	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID" json:"DeviceID,omitempty"`
}

func (m *StartedRequest) Reset()                    { *m = StartedRequest{} }
func (m *StartedRequest) String() string            { return proto.CompactTextString(m) }
func (*StartedRequest) ProtoMessage()               {}
func (*StartedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StartedRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

type NotificationRequest struct {
	DeviceID       string `protobuf:"bytes,1,opt,name=DeviceID" json:"DeviceID,omitempty"`
	NotificationID uint32 `protobuf:"varint,2,opt,name=NotificationID" json:"NotificationID,omitempty"`
}

func (m *NotificationRequest) Reset()                    { *m = NotificationRequest{} }
func (m *NotificationRequest) String() string            { return proto.CompactTextString(m) }
func (*NotificationRequest) ProtoMessage()               {}
func (*NotificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NotificationRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *NotificationRequest) GetNotificationID() uint32 {
	if m != nil {
		return m.NotificationID
	}
	return 0
}

type RPCResponse struct {
	Success   bool      `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Message   string    `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	Timestamp uint32    `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	FBO       *FBObject `protobuf:"bytes,5,opt,name=FBO" json:"FBO,omitempty"`
}

func (m *RPCResponse) Reset()                    { *m = RPCResponse{} }
func (m *RPCResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCResponse) ProtoMessage()               {}
func (*RPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RPCResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RPCResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RPCResponse) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RPCResponse) GetFBO() *FBObject {
	if m != nil {
		return m.FBO
	}
	return nil
}

type ConfigResponse struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=Notifications" json:"Notifications,omitempty"`
	Foo           string          `protobuf:"bytes,2,opt,name=Foo" json:"Foo,omitempty"`
	Bar           string          `protobuf:"bytes,3,opt,name=Bar" json:"Bar,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ConfigResponse) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *ConfigResponse) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

func (m *ConfigResponse) GetBar() string {
	if m != nil {
		return m.Bar
	}
	return ""
}

type Notification struct {
	Title string `protobuf:"bytes,1,opt,name=Title" json:"Title,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=Text" json:"Text,omitempty"`
	URL   string `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	Sound string `protobuf:"bytes,4,opt,name=Sound" json:"Sound,omitempty"`
	Image string `protobuf:"bytes,5,opt,name=Image" json:"Image,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Notification) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Notification) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *Notification) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type DeviceID struct {
	Device string `protobuf:"bytes,1,opt,name=Device" json:"Device,omitempty"`
}

func (m *DeviceID) Reset()                    { *m = DeviceID{} }
func (m *DeviceID) String() string            { return proto.CompactTextString(m) }
func (*DeviceID) ProtoMessage()               {}
func (*DeviceID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeviceID) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type DisplayRequest struct {
	Secret     string `protobuf:"bytes,1,opt,name=Secret" json:"Secret,omitempty"`
	Display    string `protobuf:"bytes,2,opt,name=Display" json:"Display,omitempty"`
	Background string `protobuf:"bytes,3,opt,name=Background" json:"Background,omitempty"`
	TextColour string `protobuf:"bytes,4,opt,name=TextColour" json:"TextColour,omitempty"`
}

func (m *DisplayRequest) Reset()                    { *m = DisplayRequest{} }
func (m *DisplayRequest) String() string            { return proto.CompactTextString(m) }
func (*DisplayRequest) ProtoMessage()               {}
func (*DisplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DisplayRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *DisplayRequest) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *DisplayRequest) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *DisplayRequest) GetTextColour() string {
	if m != nil {
		return m.TextColour
	}
	return ""
}

type SoundRequest struct {
	Secret        string `protobuf:"bytes,1,opt,name=Secret" json:"Secret,omitempty"`
	URL           string `protobuf:"bytes,2,opt,name=URL" json:"URL,omitempty"`
	Origin        string `protobuf:"bytes,3,opt,name=Origin" json:"Origin,omitempty"`
	SkipQuietZone bool   `protobuf:"varint,4,opt,name=SkipQuietZone" json:"SkipQuietZone,omitempty"`
}

func (m *SoundRequest) Reset()                    { *m = SoundRequest{} }
func (m *SoundRequest) String() string            { return proto.CompactTextString(m) }
func (*SoundRequest) ProtoMessage()               {}
func (*SoundRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SoundRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *SoundRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *SoundRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *SoundRequest) GetSkipQuietZone() bool {
	if m != nil {
		return m.SkipQuietZone
	}
	return false
}

type SuppressRequest struct {
	Secret    string `protobuf:"bytes,1,opt,name=Secret" json:"Secret,omitempty"`
	Timestamp uint32 `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *SuppressRequest) Reset()                    { *m = SuppressRequest{} }
func (m *SuppressRequest) String() string            { return proto.CompactTextString(m) }
func (*SuppressRequest) ProtoMessage()               {}
func (*SuppressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SuppressRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *SuppressRequest) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Connection struct {
	DeviceName string `protobuf:"bytes,1,opt,name=DeviceName" json:"DeviceName,omitempty"`
}

func (m *Connection) Reset()                    { *m = Connection{} }
func (m *Connection) String() string            { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()               {}
func (*Connection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Connection) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type ConnectionList struct {
	Connections []*Connection `protobuf:"bytes,1,rep,name=Connections" json:"Connections,omitempty"`
}

func (m *ConnectionList) Reset()                    { *m = ConnectionList{} }
func (m *ConnectionList) String() string            { return proto.CompactTextString(m) }
func (*ConnectionList) ProtoMessage()               {}
func (*ConnectionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ConnectionList) GetConnections() []*Connection {
	if m != nil {
		return m.Connections
	}
	return nil
}

type WifiInfoRequest struct {
	DeviceID string   `protobuf:"bytes,1,opt,name=DeviceID" json:"DeviceID,omitempty"`
	Key      string   `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	APs      []string `protobuf:"bytes,3,rep,name=APs" json:"APs,omitempty"`
}

func (m *WifiInfoRequest) Reset()                    { *m = WifiInfoRequest{} }
func (m *WifiInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*WifiInfoRequest) ProtoMessage()               {}
func (*WifiInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *WifiInfoRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *WifiInfoRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WifiInfoRequest) GetAPs() []string {
	if m != nil {
		return m.APs
	}
	return nil
}

type ButtonPressedRequest struct {
	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID" json:"DeviceID,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	ButtonID uint32 `protobuf:"varint,3,opt,name=ButtonID" json:"ButtonID,omitempty"`
	Extra    uint32 `protobuf:"varint,4,opt,name=Extra" json:"Extra,omitempty"`
}

func (m *ButtonPressedRequest) Reset()                    { *m = ButtonPressedRequest{} }
func (m *ButtonPressedRequest) String() string            { return proto.CompactTextString(m) }
func (*ButtonPressedRequest) ProtoMessage()               {}
func (*ButtonPressedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ButtonPressedRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *ButtonPressedRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ButtonPressedRequest) GetButtonID() uint32 {
	if m != nil {
		return m.ButtonID
	}
	return 0
}

func (m *ButtonPressedRequest) GetExtra() uint32 {
	if m != nil {
		return m.Extra
	}
	return 0
}

type Info struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Info) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type DeviceMessage struct {
	Title  string `protobuf:"bytes,1,opt,name=Title" json:"Title,omitempty"`
	Body   string `protobuf:"bytes,2,opt,name=Body" json:"Body,omitempty"`
	Device string `protobuf:"bytes,3,opt,name=Device" json:"Device,omitempty"`
	URL    string `protobuf:"bytes,4,opt,name=URL" json:"URL,omitempty"`
}

func (m *DeviceMessage) Reset()                    { *m = DeviceMessage{} }
func (m *DeviceMessage) String() string            { return proto.CompactTextString(m) }
func (*DeviceMessage) ProtoMessage()               {}
func (*DeviceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeviceMessage) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DeviceMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *DeviceMessage) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DeviceMessage) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func init() {
	proto.RegisterType((*FBTokens)(nil), "cnwnotification.FBTokens")
	proto.RegisterType((*FBObject)(nil), "cnwnotification.FBObject")
	proto.RegisterType((*FBCommand)(nil), "cnwnotification.FBCommand")
	proto.RegisterType((*FBButton)(nil), "cnwnotification.FBButton")
	proto.RegisterType((*ViaSMSRequest)(nil), "cnwnotification.ViaSMSRequest")
	proto.RegisterType((*ConfigRequest)(nil), "cnwnotification.ConfigRequest")
	proto.RegisterType((*Config2Request)(nil), "cnwnotification.Config2Request")
	proto.RegisterType((*ErrorLog)(nil), "cnwnotification.ErrorLog")
	proto.RegisterType((*StartedRequest)(nil), "cnwnotification.StartedRequest")
	proto.RegisterType((*NotificationRequest)(nil), "cnwnotification.NotificationRequest")
	proto.RegisterType((*RPCResponse)(nil), "cnwnotification.RPCResponse")
	proto.RegisterType((*ConfigResponse)(nil), "cnwnotification.ConfigResponse")
	proto.RegisterType((*Notification)(nil), "cnwnotification.Notification")
	proto.RegisterType((*DeviceID)(nil), "cnwnotification.DeviceID")
	proto.RegisterType((*DisplayRequest)(nil), "cnwnotification.DisplayRequest")
	proto.RegisterType((*SoundRequest)(nil), "cnwnotification.SoundRequest")
	proto.RegisterType((*SuppressRequest)(nil), "cnwnotification.SuppressRequest")
	proto.RegisterType((*Connection)(nil), "cnwnotification.Connection")
	proto.RegisterType((*ConnectionList)(nil), "cnwnotification.ConnectionList")
	proto.RegisterType((*WifiInfoRequest)(nil), "cnwnotification.WifiInfoRequest")
	proto.RegisterType((*ButtonPressedRequest)(nil), "cnwnotification.ButtonPressedRequest")
	proto.RegisterType((*Info)(nil), "cnwnotification.Info")
	proto.RegisterType((*DeviceMessage)(nil), "cnwnotification.DeviceMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CNWNotificationService service

type CNWNotificationServiceClient interface {
	// authentication optional
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// authentication optional
	GetConfig2(ctx context.Context, in *Config2Request, opts ...grpc.CallOption) (*RPCResponse, error)
	Display(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*common.Void, error)
	Sound(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (*common.Void, error)
	Suppress(ctx context.Context, in *SuppressRequest, opts ...grpc.CallOption) (*common.Void, error)
	// send an SMS message through a device (if device supports it)
	ViaSMS(ctx context.Context, in *ViaSMSRequest, opts ...grpc.CallOption) (*common.Void, error)
	GetConnections(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ConnectionList, error)
	// submit current wifi APs in range
	SendWifiInfo(ctx context.Context, in *WifiInfoRequest, opts ...grpc.CallOption) (*common.Void, error)
	GetInfo(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Info, error)
	// notify about a change in 'info' text, so screen refreshes quicker
	NotifyInfoChange(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// button pressed, sent by app
	ButtonPressed(ctx context.Context, in *ButtonPressedRequest, opts ...grpc.CallOption) (*common.Void, error)
	// button pressed, sent by app
	ButtonPressed2(ctx context.Context, in *ButtonPressedRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	// send a message via firebase to device
	SendMessageToDevice(ctx context.Context, in *DeviceMessage, opts ...grpc.CallOption) (*common.Void, error)
	// a notification was pressed
	NotificationPressed(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	// a device encountered an error
	Error(ctx context.Context, in *ErrorLog, opts ...grpc.CallOption) (*RPCResponse, error)
	// a device started the activity
	Started(ctx context.Context, in *StartedRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	// resend config to device - not intented to be driggered by device itself, but by CLI
	ResetDevice(ctx context.Context, in *DeviceID, opts ...grpc.CallOption) (*common.Void, error)
}

type cNWNotificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewCNWNotificationServiceClient(cc *grpc.ClientConn) CNWNotificationServiceClient {
	return &cNWNotificationServiceClient{cc}
}

func (c *cNWNotificationServiceClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) GetConfig2(ctx context.Context, in *Config2Request, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/GetConfig2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) Display(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/Display", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) Sound(ctx context.Context, in *SoundRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/Sound", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) Suppress(ctx context.Context, in *SuppressRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/Suppress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) ViaSMS(ctx context.Context, in *ViaSMSRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/ViaSMS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) GetConnections(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ConnectionList, error) {
	out := new(ConnectionList)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/GetConnections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) SendWifiInfo(ctx context.Context, in *WifiInfoRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/SendWifiInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) GetInfo(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) NotifyInfoChange(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/NotifyInfoChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) ButtonPressed(ctx context.Context, in *ButtonPressedRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/ButtonPressed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) ButtonPressed2(ctx context.Context, in *ButtonPressedRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/ButtonPressed2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) SendMessageToDevice(ctx context.Context, in *DeviceMessage, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/SendMessageToDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) NotificationPressed(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/NotificationPressed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) Error(ctx context.Context, in *ErrorLog, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/Error", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) Started(ctx context.Context, in *StartedRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/Started", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNWNotificationServiceClient) ResetDevice(ctx context.Context, in *DeviceID, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/cnwnotification.CNWNotificationService/ResetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CNWNotificationService service

type CNWNotificationServiceServer interface {
	// authentication optional
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	// authentication optional
	GetConfig2(context.Context, *Config2Request) (*RPCResponse, error)
	Display(context.Context, *DisplayRequest) (*common.Void, error)
	Sound(context.Context, *SoundRequest) (*common.Void, error)
	Suppress(context.Context, *SuppressRequest) (*common.Void, error)
	// send an SMS message through a device (if device supports it)
	ViaSMS(context.Context, *ViaSMSRequest) (*common.Void, error)
	GetConnections(context.Context, *common.Void) (*ConnectionList, error)
	// submit current wifi APs in range
	SendWifiInfo(context.Context, *WifiInfoRequest) (*common.Void, error)
	GetInfo(context.Context, *common.Void) (*Info, error)
	// notify about a change in 'info' text, so screen refreshes quicker
	NotifyInfoChange(context.Context, *common.Void) (*common.Void, error)
	// button pressed, sent by app
	ButtonPressed(context.Context, *ButtonPressedRequest) (*common.Void, error)
	// button pressed, sent by app
	ButtonPressed2(context.Context, *ButtonPressedRequest) (*RPCResponse, error)
	// send a message via firebase to device
	SendMessageToDevice(context.Context, *DeviceMessage) (*common.Void, error)
	// a notification was pressed
	NotificationPressed(context.Context, *NotificationRequest) (*RPCResponse, error)
	// a device encountered an error
	Error(context.Context, *ErrorLog) (*RPCResponse, error)
	// a device started the activity
	Started(context.Context, *StartedRequest) (*RPCResponse, error)
	// resend config to device - not intented to be driggered by device itself, but by CLI
	ResetDevice(context.Context, *DeviceID) (*common.Void, error)
}

func RegisterCNWNotificationServiceServer(s *grpc.Server, srv CNWNotificationServiceServer) {
	s.RegisterService(&_CNWNotificationService_serviceDesc, srv)
}

func _CNWNotificationService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_GetConfig2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).GetConfig2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/GetConfig2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).GetConfig2(ctx, req.(*Config2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_Display_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).Display(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/Display",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).Display(ctx, req.(*DisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_Sound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).Sound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/Sound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).Sound(ctx, req.(*SoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_Suppress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).Suppress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/Suppress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).Suppress(ctx, req.(*SuppressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_ViaSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViaSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).ViaSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/ViaSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).ViaSMS(ctx, req.(*ViaSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).GetConnections(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_SendWifiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).SendWifiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/SendWifiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).SendWifiInfo(ctx, req.(*WifiInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).GetInfo(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_NotifyInfoChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).NotifyInfoChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/NotifyInfoChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).NotifyInfoChange(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_ButtonPressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ButtonPressedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).ButtonPressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/ButtonPressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).ButtonPressed(ctx, req.(*ButtonPressedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_ButtonPressed2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ButtonPressedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).ButtonPressed2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/ButtonPressed2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).ButtonPressed2(ctx, req.(*ButtonPressedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_SendMessageToDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).SendMessageToDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/SendMessageToDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).SendMessageToDevice(ctx, req.(*DeviceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_NotificationPressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).NotificationPressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/NotificationPressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).NotificationPressed(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).Error(ctx, req.(*ErrorLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_Started_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).Started(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/Started",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).Started(ctx, req.(*StartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNWNotificationService_ResetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNWNotificationServiceServer).ResetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnwnotification.CNWNotificationService/ResetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNWNotificationServiceServer).ResetDevice(ctx, req.(*DeviceID))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNWNotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cnwnotification.CNWNotificationService",
	HandlerType: (*CNWNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _CNWNotificationService_GetConfig_Handler,
		},
		{
			MethodName: "GetConfig2",
			Handler:    _CNWNotificationService_GetConfig2_Handler,
		},
		{
			MethodName: "Display",
			Handler:    _CNWNotificationService_Display_Handler,
		},
		{
			MethodName: "Sound",
			Handler:    _CNWNotificationService_Sound_Handler,
		},
		{
			MethodName: "Suppress",
			Handler:    _CNWNotificationService_Suppress_Handler,
		},
		{
			MethodName: "ViaSMS",
			Handler:    _CNWNotificationService_ViaSMS_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _CNWNotificationService_GetConnections_Handler,
		},
		{
			MethodName: "SendWifiInfo",
			Handler:    _CNWNotificationService_SendWifiInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _CNWNotificationService_GetInfo_Handler,
		},
		{
			MethodName: "NotifyInfoChange",
			Handler:    _CNWNotificationService_NotifyInfoChange_Handler,
		},
		{
			MethodName: "ButtonPressed",
			Handler:    _CNWNotificationService_ButtonPressed_Handler,
		},
		{
			MethodName: "ButtonPressed2",
			Handler:    _CNWNotificationService_ButtonPressed2_Handler,
		},
		{
			MethodName: "SendMessageToDevice",
			Handler:    _CNWNotificationService_SendMessageToDevice_Handler,
		},
		{
			MethodName: "NotificationPressed",
			Handler:    _CNWNotificationService_NotificationPressed_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _CNWNotificationService_Error_Handler,
		},
		{
			MethodName: "Started",
			Handler:    _CNWNotificationService_Started_Handler,
		},
		{
			MethodName: "ResetDevice",
			Handler:    _CNWNotificationService_ResetDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/cnwnotification/cnwnotification.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/cnwnotification/cnwnotification.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0x4b, 0x6f, 0x1b, 0x37,
	0x10, 0x86, 0xb4, 0x8a, 0x2d, 0x8f, 0x2d, 0xc5, 0x60, 0xd2, 0x60, 0xa3, 0xa6, 0xa9, 0xb1, 0x48,
	0x1b, 0xa3, 0x35, 0x14, 0x40, 0x29, 0x8c, 0x20, 0x7d, 0xc5, 0x92, 0x6c, 0x57, 0x88, 0x5f, 0x59,
	0xd9, 0x09, 0xda, 0x53, 0xd7, 0x12, 0xad, 0x32, 0x96, 0xc8, 0xed, 0x92, 0xb2, 0xa3, 0x1e, 0x7b,
	0xee, 0x4f, 0xeb, 0x1f, 0xea, 0xad, 0xe0, 0x6b, 0x5f, 0x5a, 0xd9, 0x3e, 0x2d, 0x67, 0x38, 0x33,
	0x1c, 0xce, 0xe3, 0x1b, 0x2e, 0xbc, 0x19, 0xb1, 0x71, 0x40, 0x47, 0xcd, 0x01, 0xa3, 0x51, 0x30,
	0xbc, 0x66, 0x6c, 0xd8, 0xa4, 0x58, 0xbc, 0x08, 0x42, 0xc2, 0x5f, 0x0c, 0xe8, 0x35, 0x65, 0x82,
	0x5c, 0x90, 0x41, 0x20, 0x08, 0xa3, 0x79, 0xba, 0x19, 0x46, 0x4c, 0x30, 0x74, 0x3f, 0xc7, 0x6e,
	0x34, 0x6f, 0x32, 0xc9, 0x26, 0x13, 0x69, 0x49, 0x7d, 0xb4, 0x01, 0xef, 0x9f, 0x12, 0x54, 0xf7,
	0xda, 0xa7, 0xec, 0x12, 0x53, 0x8e, 0x3a, 0x50, 0x3d, 0x0c, 0xc2, 0x90, 0xd0, 0x11, 0x77, 0x4b,
	0x1b, 0xce, 0xe6, 0x6a, 0xeb, 0x79, 0x33, 0x7f, 0xae, 0x15, 0x6e, 0x5a, 0xc9, 0x5d, 0x2a, 0xa2,
	0x99, 0x1f, 0x2b, 0x36, 0xbe, 0x87, 0x5a, 0x66, 0x0b, 0xad, 0x83, 0x73, 0x89, 0x67, 0x6e, 0x69,
	0xa3, 0xb4, 0xb9, 0xe2, 0xcb, 0x25, 0x7a, 0x08, 0xf7, 0xae, 0x82, 0xf1, 0x14, 0xbb, 0x65, 0xc5,
	0xd3, 0xc4, 0xeb, 0xf2, 0xab, 0x92, 0xf7, 0xbb, 0xf4, 0xe6, 0xf8, 0xfc, 0x23, 0x1e, 0x08, 0xf4,
	0x04, 0x56, 0x4e, 0xc9, 0x04, 0x73, 0x11, 0x4c, 0x42, 0xa5, 0x5d, 0xf3, 0x13, 0x06, 0xda, 0x86,
	0x6a, 0x87, 0x4d, 0x26, 0x01, 0x1d, 0x72, 0xb7, 0xac, 0x7c, 0x6d, 0x14, 0xf8, 0x6a, 0x44, 0xfc,
	0x58, 0xd6, 0xfb, 0xd7, 0x81, 0x95, 0x98, 0x8f, 0x5c, 0x58, 0x36, 0x4b, 0xe3, 0x9f, 0x25, 0xa5,
	0x8f, 0xa7, 0x44, 0x8c, 0x63, 0x1f, 0x15, 0x81, 0x10, 0x54, 0xda, 0x6c, 0x38, 0x73, 0x1d, 0xc5,
	0x54, 0x6b, 0xc9, 0xeb, 0x93, 0xbf, 0xb0, 0x5b, 0x51, 0x2e, 0xaa, 0x35, 0x7a, 0x0a, 0xd0, 0x0e,
	0x06, 0x97, 0xa3, 0x88, 0x4d, 0xe9, 0xd0, 0xbd, 0xa7, 0xa4, 0x53, 0x1c, 0xb9, 0xbf, 0xc7, 0x22,
	0x6c, 0xf6, 0x97, 0xf4, 0x7e, 0xc2, 0x91, 0x31, 0x3b, 0xf3, 0x7b, 0xee, 0xb2, 0x8e, 0xd9, 0x99,
	0xdf, 0x43, 0x2f, 0x61, 0xb9, 0x3d, 0x15, 0x82, 0x51, 0xee, 0x56, 0xd5, 0x75, 0x1f, 0x17, 0x5c,
	0x57, 0x4b, 0xf8, 0x56, 0x12, 0x3d, 0x82, 0xa5, 0x9d, 0x90, 0xbc, 0xc5, 0x33, 0x77, 0x45, 0x59,
	0x32, 0x94, 0x3c, 0xbe, 0x8b, 0xaf, 0xc8, 0x00, 0x1f, 0x05, 0x13, 0xec, 0x82, 0x3e, 0x3e, 0xe1,
	0xa0, 0x26, 0xa0, 0x53, 0xfc, 0x49, 0xc8, 0xab, 0x1c, 0x4e, 0xc7, 0x82, 0x84, 0x63, 0x82, 0x23,
	0x77, 0x75, 0xa3, 0xb4, 0x59, 0xf6, 0x0b, 0x76, 0x50, 0x0b, 0x1e, 0xea, 0x23, 0x73, 0x1a, 0x6b,
	0x4a, 0xa3, 0x70, 0x0f, 0x3d, 0x83, 0x9a, 0xe6, 0x77, 0xd8, 0x78, 0x3a, 0xa1, 0xdc, 0xad, 0xa9,
	0xf8, 0x65, 0x99, 0x2a, 0x90, 0xfa, 0x52, 0xec, 0x9a, 0xbb, 0x75, 0x25, 0x92, 0xe2, 0x78, 0x1f,
	0x65, 0xc1, 0x68, 0x5a, 0x26, 0x42, 0xfa, 0x66, 0x32, 0xa9, 0xd6, 0xa8, 0x0e, 0xe5, 0x5e, 0x57,
	0xe5, 0xb0, 0xe6, 0x97, 0x7b, 0xdd, 0x38, 0x59, 0x4e, 0x2a, 0x59, 0xeb, 0xe0, 0xf8, 0xec, 0xda,
	0xe4, 0x4f, 0x2e, 0x65, 0xf2, 0x77, 0x3f, 0x89, 0x28, 0x50, 0x99, 0xab, 0xf9, 0x9a, 0xf0, 0x76,
	0xa0, 0xf6, 0x9e, 0x04, 0xfd, 0xc3, 0xbe, 0x8f, 0xff, 0x9c, 0x62, 0x2e, 0x64, 0x78, 0x8f, 0xa6,
	0x93, 0x73, 0x1c, 0x99, 0x23, 0x0d, 0x25, 0xab, 0xea, 0x10, 0x73, 0x1e, 0x8c, 0x6c, 0xf5, 0x58,
	0xd2, 0x7b, 0x0e, 0xb5, 0x0e, 0xa3, 0x17, 0x64, 0x94, 0x32, 0xd1, 0xc7, 0x83, 0x08, 0x5b, 0xaf,
	0x0d, 0xe5, 0xb5, 0xa1, 0xae, 0x05, 0x5b, 0x29, 0x49, 0x9d, 0x21, 0x2b, 0xa9, 0x29, 0x79, 0x98,
	0xe9, 0x49, 0x7b, 0x98, 0x21, 0xbd, 0x1f, 0xa0, 0xba, 0x1b, 0x45, 0x2c, 0x3a, 0x60, 0x23, 0xd4,
	0x80, 0xaa, 0x96, 0xef, 0x75, 0x8d, 0x7e, 0x4c, 0xab, 0xdb, 0x4a, 0x39, 0x5b, 0xea, 0x8a, 0xf0,
	0xb6, 0xa0, 0xde, 0x17, 0x41, 0x24, 0xf0, 0xd0, 0x7a, 0x70, 0x83, 0x0d, 0xef, 0x57, 0x78, 0x70,
	0x94, 0xaa, 0xc5, 0x3b, 0xa8, 0xa0, 0xaf, 0xa1, 0x9e, 0x56, 0x89, 0xd3, 0x94, 0xe3, 0x4a, 0x88,
	0x5a, 0xf5, 0x4f, 0x3a, 0x3e, 0xe6, 0x21, 0xa3, 0x5c, 0x5d, 0xb8, 0x3f, 0x1d, 0x0c, 0x30, 0xe7,
	0xca, 0x64, 0xd5, 0xb7, 0xe4, 0xe2, 0xb8, 0x67, 0xb1, 0xa4, 0x92, 0xc7, 0x92, 0x6f, 0xc1, 0xd9,
	0x6b, 0x1f, 0xab, 0x64, 0x17, 0xf7, 0x95, 0x46, 0x24, 0x5f, 0x4a, 0x79, 0x33, 0x9b, 0x99, 0xd8,
	0xa1, 0x0e, 0xd4, 0xd2, 0x2e, 0x5b, 0xec, 0xfc, 0x62, 0xce, 0x50, 0x26, 0x42, 0x59, 0x1d, 0x59,
	0x84, 0x7b, 0x8c, 0x19, 0xbf, 0xe5, 0x52, 0x72, 0xda, 0x41, 0x64, 0xa0, 0x46, 0x2e, 0xbd, 0x2b,
	0x58, 0x4b, 0x2b, 0x25, 0x18, 0x55, 0xca, 0x61, 0x94, 0x6a, 0x83, 0x72, 0xaa, 0x0d, 0x14, 0x9e,
	0x1c, 0x58, 0x5b, 0x67, 0xfe, 0x81, 0xd4, 0xed, 0x2b, 0xf0, 0xa9, 0x68, 0x5d, 0x45, 0x48, 0x6e,
	0x6f, 0x22, 0xe3, 0xa7, 0x21, 0x4b, 0x13, 0x9e, 0x97, 0x64, 0x71, 0x51, 0x19, 0x7a, 0x7f, 0x97,
	0xa0, 0xde, 0x25, 0x3c, 0x1c, 0x07, 0xb3, 0x5b, 0x6a, 0x5b, 0xa6, 0xc9, 0x48, 0xda, 0x34, 0x19,
	0x32, 0x07, 0x9b, 0x4e, 0x11, 0x6c, 0xca, 0xeb, 0x74, 0xd8, 0x98, 0x4d, 0x23, 0xe3, 0x79, 0x8a,
	0x23, 0x03, 0xa4, 0xee, 0x71, 0x9b, 0x07, 0x26, 0x1c, 0xe5, 0x24, 0x1c, 0x8f, 0x60, 0xe9, 0x38,
	0x22, 0x23, 0x42, 0xcd, 0xa9, 0x86, 0x92, 0x28, 0xd5, 0xbf, 0x24, 0xe1, 0xbb, 0x29, 0xc1, 0xe2,
	0x37, 0x46, 0x35, 0xca, 0x57, 0xfd, 0x2c, 0xd3, 0xdb, 0x87, 0xfb, 0xfd, 0x69, 0x18, 0x46, 0x98,
	0xf3, 0xdb, 0x8e, 0xce, 0x54, 0x62, 0x39, 0x57, 0x89, 0xde, 0x16, 0x40, 0x87, 0x51, 0x8a, 0x07,
	0x2a, 0xbf, 0x59, 0x98, 0x2e, 0xe5, 0x61, 0xda, 0x3b, 0x56, 0xa5, 0x68, 0xa4, 0x0f, 0x08, 0x17,
	0xe8, 0x47, 0x58, 0x4d, 0x38, 0xb6, 0x10, 0x3f, 0x9f, 0x2b, 0xc4, 0x44, 0xc6, 0x4f, 0xcb, 0x7b,
	0xef, 0xe0, 0xfe, 0x07, 0x72, 0x41, 0x7a, 0xf4, 0x82, 0xdd, 0xa5, 0x83, 0xd7, 0xc1, 0x91, 0xb3,
	0xc5, 0x84, 0x51, 0x0e, 0x96, 0x75, 0x70, 0x76, 0x4e, 0xb8, 0xeb, 0x6c, 0x38, 0x92, 0xb3, 0x73,
	0xc2, 0xbd, 0x2b, 0x3b, 0x1a, 0x4e, 0x64, 0x74, 0xee, 0x04, 0x26, 0x05, 0x76, 0x1b, 0x50, 0xd5,
	0x56, 0x7a, 0x5d, 0x03, 0xdd, 0x31, 0x9d, 0x80, 0x75, 0x25, 0x0d, 0xd6, 0x0d, 0xa8, 0xc8, 0x6b,
	0x14, 0x0d, 0x05, 0x6f, 0x00, 0x35, 0x7d, 0x96, 0x85, 0x87, 0x85, 0x8d, 0xa4, 0x86, 0x7d, 0x39,
	0x35, 0xec, 0x93, 0xf2, 0x77, 0x32, 0x28, 0x6c, 0x2a, 0xaa, 0x12, 0x57, 0x54, 0xeb, 0xbf, 0x2a,
	0x3c, 0xea, 0x1c, 0x7d, 0x48, 0x37, 0x6c, 0x1f, 0x47, 0x4a, 0xf8, 0x00, 0x56, 0xf6, 0xb1, 0xd0,
	0x28, 0x82, 0x9e, 0x16, 0x65, 0x27, 0x99, 0x10, 0x8d, 0x2f, 0x17, 0xee, 0x1b, 0xf8, 0x79, 0x0b,
	0x10, 0x5b, 0x6b, 0xa1, 0x45, 0xe2, 0x76, 0x8e, 0x34, 0x9e, 0xcc, 0x09, 0xa4, 0xc1, 0xf5, 0x55,
	0xdc, 0x9b, 0x05, 0x96, 0xb2, 0xfd, 0xdd, 0x58, 0x6b, 0x9a, 0xa7, 0xe4, 0x7b, 0x46, 0x86, 0xe8,
	0x3b, 0x03, 0x28, 0x68, 0x1e, 0xf7, 0xd2, 0x3d, 0x99, 0xd3, 0x7a, 0x0d, 0x55, 0xdb, 0x39, 0x68,
	0x63, 0x5e, 0x31, 0xdb, 0x54, 0x39, 0xdd, 0x6d, 0x58, 0xd2, 0xf3, 0xb8, 0x20, 0x86, 0x99, 0x41,
	0x9d, 0xd3, 0xfb, 0x19, 0xea, 0x3a, 0x60, 0xb6, 0xee, 0x51, 0x66, 0xbf, 0x38, 0xe2, 0xe9, 0x2e,
	0xfb, 0x09, 0xd6, 0xfa, 0x98, 0x0e, 0x6d, 0xab, 0x14, 0x38, 0x9e, 0xeb, 0xa2, 0x9c, 0x03, 0x4d,
	0x58, 0xde, 0xc7, 0x42, 0xa9, 0x66, 0x4f, 0xfe, 0x6c, 0xce, 0x90, 0x12, 0x6a, 0xc2, 0xba, 0x2a,
	0xa3, 0x99, 0xa4, 0x3a, 0x7f, 0x04, 0x74, 0x84, 0x73, 0x8a, 0x59, 0xfb, 0x5d, 0xfb, 0xb4, 0x32,
	0x3d, 0x87, 0xbe, 0x9a, 0xb3, 0x5b, 0xd4, 0x93, 0x39, 0x2b, 0x67, 0x50, 0xcf, 0x48, 0xb5, 0xee,
	0x6a, 0xe6, 0xe6, 0x0a, 0xeb, 0xc0, 0x03, 0x19, 0x3c, 0xd3, 0x7a, 0xa7, 0xcc, 0x34, 0xd0, 0x7c,
	0x0a, 0x33, 0x2d, 0x9a, 0xf3, 0x2d, 0xf7, 0xdc, 0xb0, 0xf7, 0x7c, 0x76, 0xf3, 0xc8, 0xbd, 0x93,
	0x7f, 0x6f, 0xcc, 0x6b, 0x08, 0xcd, 0x3f, 0x04, 0xec, 0x6b, 0xea, 0x16, 0x0b, 0xbf, 0xc0, 0xb2,
	0x79, 0x39, 0x15, 0xf4, 0x50, 0xf6, 0x4d, 0x75, 0x8b, 0xa5, 0x6d, 0x58, 0xf5, 0x31, 0xc7, 0xc2,
	0xc4, 0xe8, 0xf1, 0x82, 0x18, 0xf5, 0xba, 0xd9, 0xf0, 0xb4, 0xb7, 0xe0, 0x1b, 0x8a, 0x45, 0xfa,
	0x27, 0xd0, 0xfc, 0x16, 0xca, 0xff, 0xc0, 0xbc, 0x91, 0xf3, 0x25, 0xf5, 0x2b, 0xf8, 0xf2, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xfa, 0xa9, 0xca, 0x8f, 0x0e, 0x00, 0x00,
}
