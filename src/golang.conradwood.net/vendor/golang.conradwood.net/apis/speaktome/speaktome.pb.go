// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/speaktome/speaktome.proto
// DO NOT EDIT!

/*
Package speaktome is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/speaktome/speaktome.proto

It has these top-level messages:
	SayMessage
	Sound
*/
package speaktome

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SayMessage struct {
	Text         string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
	DownloadFrom string `protobuf:"bytes,2,opt,name=DownloadFrom" json:"DownloadFrom,omitempty"`
}

func (m *SayMessage) Reset()                    { *m = SayMessage{} }
func (m *SayMessage) String() string            { return proto.CompactTextString(m) }
func (*SayMessage) ProtoMessage()               {}
func (*SayMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SayMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SayMessage) GetDownloadFrom() string {
	if m != nil {
		return m.DownloadFrom
	}
	return ""
}

type Sound struct {
	DownloadFrom string `protobuf:"bytes,1,opt,name=DownloadFrom" json:"DownloadFrom,omitempty"`
	Until        uint32 `protobuf:"varint,2,opt,name=Until" json:"Until,omitempty"`
	MaxRepeat    uint32 `protobuf:"varint,3,opt,name=MaxRepeat" json:"MaxRepeat,omitempty"`
}

func (m *Sound) Reset()                    { *m = Sound{} }
func (m *Sound) String() string            { return proto.CompactTextString(m) }
func (*Sound) ProtoMessage()               {}
func (*Sound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Sound) GetDownloadFrom() string {
	if m != nil {
		return m.DownloadFrom
	}
	return ""
}

func (m *Sound) GetUntil() uint32 {
	if m != nil {
		return m.Until
	}
	return 0
}

func (m *Sound) GetMaxRepeat() uint32 {
	if m != nil {
		return m.MaxRepeat
	}
	return 0
}

func init() {
	proto.RegisterType((*SayMessage)(nil), "speaktome.SayMessage")
	proto.RegisterType((*Sound)(nil), "speaktome.Sound")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SpeakToMeService service

type SpeakToMeServiceClient interface {
	Say(ctx context.Context, in *SayMessage, opts ...grpc.CallOption) (*common.Void, error)
	Repeat(ctx context.Context, in *Sound, opts ...grpc.CallOption) (*common.Void, error)
}

type speakToMeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpeakToMeServiceClient(cc *grpc.ClientConn) SpeakToMeServiceClient {
	return &speakToMeServiceClient{cc}
}

func (c *speakToMeServiceClient) Say(ctx context.Context, in *SayMessage, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/speaktome.SpeakToMeService/Say", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakToMeServiceClient) Repeat(ctx context.Context, in *Sound, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/speaktome.SpeakToMeService/Repeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SpeakToMeService service

type SpeakToMeServiceServer interface {
	Say(context.Context, *SayMessage) (*common.Void, error)
	Repeat(context.Context, *Sound) (*common.Void, error)
}

func RegisterSpeakToMeServiceServer(s *grpc.Server, srv SpeakToMeServiceServer) {
	s.RegisterService(&_SpeakToMeService_serviceDesc, srv)
}

func _SpeakToMeService_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakToMeServiceServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speaktome.SpeakToMeService/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakToMeServiceServer).Say(ctx, req.(*SayMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakToMeService_Repeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakToMeServiceServer).Repeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speaktome.SpeakToMeService/Repeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakToMeServiceServer).Repeat(ctx, req.(*Sound))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpeakToMeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "speaktome.SpeakToMeService",
	HandlerType: (*SpeakToMeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _SpeakToMeService_Say_Handler,
		},
		{
			MethodName: "Repeat",
			Handler:    _SpeakToMeService_Repeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/speaktome/speaktome.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/speaktome/speaktome.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xa9, 0xb5, 0x85, 0x0c, 0x15, 0xca, 0xa0, 0x10, 0x8a, 0x07, 0x09, 0x22, 0xc5, 0xc3,
	0x16, 0xd4, 0x5f, 0x20, 0xc5, 0x5b, 0x2e, 0x49, 0xf5, 0x2a, 0x63, 0x76, 0x88, 0xc1, 0x64, 0x27,
	0x24, 0xab, 0x6d, 0xff, 0xbd, 0x64, 0x13, 0xdc, 0x96, 0x82, 0xa7, 0x4c, 0xde, 0xbc, 0x79, 0xec,
	0xfb, 0xe0, 0x29, 0x97, 0x92, 0x4c, 0xae, 0x32, 0x31, 0x0d, 0xe9, 0xad, 0x88, 0x56, 0x86, 0xed,
	0x8a, 0xea, 0xa2, 0x5d, 0xb5, 0x35, 0xd3, 0x97, 0x95, 0x8a, 0xfd, 0xa4, 0xea, 0x46, 0xac, 0x60,
	0xf0, 0x27, 0x2c, 0xd4, 0x3f, 0x01, 0x99, 0x54, 0x95, 0x98, 0xe1, 0xd3, 0x9f, 0x46, 0x6b, 0x80,
	0x94, 0xf6, 0x31, 0xb7, 0x2d, 0xe5, 0x8c, 0x08, 0xe7, 0x1b, 0xde, 0xd9, 0x70, 0x74, 0x33, 0x5a,
	0x06, 0x89, 0x9b, 0x31, 0x82, 0xd9, 0x5a, 0xb6, 0xa6, 0x14, 0xd2, 0x2f, 0x8d, 0x54, 0xe1, 0x99,
	0xdb, 0x1d, 0x69, 0xd1, 0x3b, 0x4c, 0x52, 0xf9, 0x36, 0xfa, 0xc4, 0x3c, 0x3a, 0x35, 0xe3, 0x25,
	0x4c, 0x5e, 0x8d, 0x2d, 0x4a, 0x97, 0x74, 0x91, 0xf4, 0x3f, 0x78, 0x0d, 0x41, 0x4c, 0xbb, 0x84,
	0x6b, 0x26, 0x1b, 0x8e, 0xdd, 0xc6, 0x0b, 0x0f, 0x9f, 0x30, 0x4f, 0xbb, 0x8e, 0x1b, 0x89, 0x39,
	0xe5, 0xe6, 0xa7, 0xc8, 0x18, 0xef, 0x61, 0x9c, 0xd2, 0x1e, 0xaf, 0x94, 0xc7, 0xe1, 0xab, 0x2c,
	0x66, 0x6a, 0xe8, 0xf9, 0x26, 0x85, 0xc6, 0x25, 0x4c, 0xfb, 0x24, 0x9c, 0x1f, 0xda, 0xbb, 0x37,
	0x1f, 0x3b, 0x9f, 0xef, 0xe0, 0xd6, 0xb0, 0x3d, 0xe4, 0x37, 0x10, 0xed, 0x10, 0xfa, 0xdb, 0x8f,
	0xa9, 0xe3, 0xf7, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xda, 0xb4, 0x03, 0x3f, 0xb2, 0x01, 0x00,
	0x00,
}
