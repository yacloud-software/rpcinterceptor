
syntax = "proto3";

package rpcaclapi;
option java_package = "net.conradwood.golang.apis.rpcaclapi";
import "golang.conradwood.net/apis/auth/auth.proto";
import "golang.conradwood.net/apis/common/common.proto";
import "golang.conradwood.net/apis/rpcinterceptor/rpcinterceptor.proto";

message Service {
  uint64 ID = 1;
  string Name = 2;   // the name, e.g. auth.AuthenticationService
  string UserID = 3; // the corresponding user account for this service
}

message Method {
  uint64 ID = 1;
  string Name = 2;
  uint64 ServiceID = 3;
}

message ServiceList {
  repeated Service Services = 1;
}

message GetMethodsRequest {
  uint64 ServiceID = 1;
}

message MethodList {
  repeated Method Methods = 1;
}
message FullMethodList {
  repeated FullMethod Methods = 1;
}
message FullMethod {
  uint64 ID = 1;
  string Name = 2;
  Service Service = 3;
}

message LogEntryRequest {
  uint64 MaxEntries = 1;
}

message LogEntry {
  uint64 Timestamp = 1;
  Service Service = 2;
  Method Method = 3;
  rpcinterceptor.InterceptRPCResponse Response = 4;
}

message LogEntryList {
  repeated LogEntry Entries = 1;
}

message MethodIDAndGroupID {
  uint64 MethodID = 1;
  string GroupID = 2;
}

message LogSearchRequest {
  // only include entries which these user(s) made (empty list=all)
  repeated string UserIDs = 1;
  // only include entries which users in these groups made (empty list=all)
  repeated string GroupIDs = 2;
  // automatically include entries which do not match the SearchRequest but have the same requestid as one that matched
  bool FullRequests = 3;
  // unix epoch starttime (only include entries younger than this). 0 = all
  uint32 StartTime = 4;
  // unix epoch endtime (only include entries older than this). 0 = all
  uint32 EndTime = 5;
  // only include entries where the caller service is in this list (empty list=all)
  repeated uint64 CallerServiceIDs = 6;
  // only include entries where the called service is in this list (empty list=all)
  repeated uint64 CalledServiceIDs = 7;
  // only include entries where the caller method is in this list (empty list=all)
  repeated uint64 CallerMethodIDs = 8;
  // only include entries where the called method is in this list (empty list=all)
  repeated uint64 CalledMethodIDs = 9;
  // limit searchlogs to these request IDs
  repeated string RequestIDs = 10;
}
message ErrorSearchRequest {
  // only include entries which these user(s) made (empty list=all)
  repeated string UserIDs = 1;
  // only include entries which users in these groups made (empty list=all)
  repeated string GroupIDs = 2;
  // automatically include entries which do not match the SearchRequest but have the same requestid as one that matched
  bool FullRequests = 3;
  // unix epoch starttime (only include entries younger than this). 0 = all
  uint32 StartTime = 4;
  // unix epoch endtime (only include entries older than this). 0 = all
  uint32 EndTime = 5;
  // only include entries where the caller service is in this list (empty list=all)
  repeated uint64 CallerServiceIDs = 6;
  // only include entries where the called service is in this list (empty list=all)
  repeated uint64 CalledServiceIDs = 7;
  // only include entries where the caller method is in this list (empty list=all)
  repeated uint64 CallerMethodIDs = 8;
  // only include entries where the called method is in this list (empty list=all)
  repeated uint64 CalledMethodIDs = 9;
  // limit searchlogs to these request IDs
  repeated string RequestIDs = 10;
  // exclude those userids
  repeated string ExcludeUserIDs = 11;
}

message ErrorEntryList {
  repeated ErrorEntry Entries = 1;
}

message ErrorEntry {
  uint64 Timestamp = 1;
  Service Service = 2;      // the service which threw this error
  Method Method = 3;        // the method which threw this error
  string RequestID = 4;     // The unique request id (created on-the-fly or mirrors what was passed in)
  auth.User CallerUser = 5; // details of the user (the caller)
  uint32 ErrorCode = 6;
  string DisplayMessage = 7; // result of error.String()
  string LogMessage = 8;     // "" or, if it's a grpc error, it's error.Details()
}

message Call {
  FullMethod CalledMethod = 1;
  auth.User CallingService = 2;
  auth.User CallingUser = 3;
}

message CallList {
  repeated Call Calls = 1;
}
message ServiceNameRequest {
  string Name = 1;
}
message ServiceIDResponse {
  uint64 ID = 1;
}

message DBRule {
  uint64 ID = 1;
  uint64 ServiceID = 2;
  bool ResultOnMatch = 3;
}
message DBRuleMatch {
  uint64 ID = 1;
  uint64 RuleID = 2;
  uint32 RuleMatch = 3;
}
message DBRuleService {
  uint64 ID = 1;
  uint64 RuleID = 2;        // part of this rule
  string ServiceUserID = 3; // the Services' UserID in auth service
}
message DBRuleGroup {
  uint64 ID = 1;
  uint64 RuleID = 2;  // part of this rule
  string GroupID = 3; // the GroupIDs to match on
}

// rule matches on wether service or user or both or neither exists
enum RuleMatch {
  INVALID = 0; // make sure 'empty' rules do not ever match
  NEITHER = 1;
  SERVICE_ONLY = 2;
  USER_ONLY = 3;
  SERVICE_AND_USER = 4;
}
/*
the checks on inbound request are done like so:
1. check if presence of calleruser and callerservice match any of the "RuleMatch" - if not: skip
2. if user exists and is not in group AND group is non-empty: skip
3. if service exists and is not in list AND list is non-empty: skip
4. Apply "grant"
 */
message Rule {
  uint64 ID = 1;
  repeated RuleMatch Match = 2;      // initial check - service|user present|required? if not - rule does not apply
  repeated string FromServiceID = 3; // empty  means any service (refers to auth user ids)
  repeated string GroupID = 4;       // empty means any group (equivalent to including group "All")
  bool Grant = 5;                    // The result from this rule
}

// this defines how to decide wether or not to grant access to a service
message ServiceRules {
  uint64 ServiceID = 1;
  repeated Rule Rules = 2; // ordered list of rules. first one wins.
}
message ServiceID {
  uint64 ID = 1;
}

message ServiceIDList {
  repeated uint64 ID = 1;
}

message GroupServiceRequest {
  string ServiceName = 1; // fuzzy match for convenience. error if not exactly one match
  uint64 ServiceID = 2;   // instead of servicename, specific rpc service id
  string GroupID = 3;
}

message ServiceByUserIDRequest {
  string UserID=1;
}
message ServiceByIDRequest {
  string ID=1;
}

// this services configures the RPCInterceptor
service RPCACLService {
  // given a serviceid for a service, this will return the rpcinterceptor service
  rpc GetServiceByID(ServiceByIDRequest) returns (Service);
  // given a userid for a service, this will return the rpcinterceptor service
  //rpc GetServiceByUserID(ServiceByUserIDRequest) returns (Service);  // get ALL services currently known
  // (known means: a method of this service has requested authentication at least once.)
  //rpc GetServices(common.Void) returns (ServiceList);
  // get all methods currently known for a given service
  // (known means: the method has requested authentication at least once.)
  //rpc GetMethods(GetMethodsRequest) returns (MethodList);
  // get all groups known to the auth service.
  // essentially queries & caches the auth service
  // OBSOLETE
  //rpc GetUserGroups(common.Void) returns (auth.GroupList);
  // add user to group
  // OBSOLETE
  //rpc AddUserToGroup(auth.AddToGroupRequest) returns (common.Void);
  // remove user from a group
  // OBSOLETE
  //rpc RemoveUserFromGroup(auth.RemoveFromGroupRequest) returns (common.Void);
  // get all users for a group
  // OBSOLETE
  // rpc ListUsersInGroup(auth.ListGroupRequest) returns (auth.UserListResponse);
  // get all groups associated (have access to) a given method
  // OBSOLETE
  //rpc GetGroupsForMethod(Method) returns (auth.GroupList);
  // add a group to a Method (grant access to an rpc for a given group)
  // returns the list of groups for this method PRIOR to the update
  // OBSOLETE
  //rpc AddGroupToMethod(MethodIDAndGroupID) returns (auth.GroupList);
  // remove a group from a method (revoke access to an rpc for a given group)
  // returns the list of groups for this method PRIOR to the update
  // OBSOLETE
  // rpc RemoveGroupFromMethod(MethodIDAndGroupID) returns (auth.GroupList);
  // return list of methods a group as access to
  // OBSOLETE
  // rpc GetMethodsForGroups(auth.Group) returns (FullMethodList);
  // gets the most recent logentries limited by some count
  // OBSOLETE
  //rpc GetMostRecentLogs(LogEntryRequest) returns (LogEntryList);
  // gets the most recent logentries for the calling user
  // OBSOLETE
  //rpc GetMyMostRecentLogs(LogEntryRequest) returns (LogEntryList);
  // sophisticated(ish) search for logs
  // OBSOLETE
  //rpc SearchLogs(LogSearchRequest) returns (LogEntryList);
  // UNDOCUMENTED CALL, USE WITH CARE
  // OBSOLETE
  //rpc ListCalls(common.Void) returns (CallList);
  // sophisticated(ish) search for errors which occured in the system
  // OBSOLETE
  //rpc SearchErrors(ErrorSearchRequest) returns (ErrorEntryList);
  // ServiceNametoID (privileged)
  rpc ServiceNameToID(ServiceNameRequest) returns (ServiceIDResponse);
  // provide set of rules to decide wether or not to grant a request
  //rpc GetRulesForService(ServiceID) returns (ServiceRules);
  // provide set of rules to decide wether or not to grant a request
  //  rpc GetRulesForServices(ServiceIDList) returns (ServiceRules);
  // authorize a particular group for a service
  //rpc AuthoriseGroupService(GroupServiceRequest) returns (Service);
}
